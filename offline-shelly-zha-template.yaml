substitutions:
  name: "offline-shelly"
  # light: "light.some_hass_light"
  hass_service: "light"
  relay_pin: GPIO5
  switch_1_pin: GPIO4
  switch_2_pin: GPIO14
  status_led_pin: GPIO0

dashboard_import:
  package_import_url: github://TheNoim/OfflineShelly/offline-shelly-z2m-template.yaml@main
  import_full_config: false # or true

output:
  - platform: gpio
    pin: ${relay_pin}
    id: shelly_1l_relay

light:
  - platform: binary
    name: ${name}_light
    output: shelly_1l_relay
    id: lightid

binary_sensor:
  - platform: gpio
    pin:
      number: ${switch_1_pin}
    name: ${name}_switch_1
    on_state:
      then:
        - script.execute: toggle_light
    id: switchid1
    filters:
      - delayed_on_off: 50ms
  - platform: gpio
    pin:
      number: ${switch_2_pin}
    name: ${name}_switch_2
    # on_state:
    #   then:
    #     - lambda: |-
    #         ESP_LOGD("last_state", "x = %s", x);
    #         id(last_light_state) = x;

  - platform: homeassistant
    entity_id: ${light}
    internal: true
    publish_initial_state: true
    id: hass_light

text_sensor:
  - platform: homeassistant
    entity_id: ${light}
    id: hass_light_state
    internal: true
    on_raw_value:
      then:
        if:
          condition:
            or:
              - text_sensor.state:
                  id: hass_light_state
                  state: "on"
              - text_sensor.state:
                  id: hass_light_state
                  state: "off"
          then:
            - lambda: ESP_LOGD("hass_light_state", "light_is_available = true");
            - globals.set:
                id: light_is_available
                value: "true"
          else:
            - lambda: ESP_LOGD("hass_light_state", "light_is_available = false");
            - globals.set:
                id: light_is_available
                value: "false"

sensor:
  - platform: ntc
    sensor: temp_resistance_reading
    name: ${name}_temperature
    unit_of_measurement: "Â°C"
    accuracy_decimals: 1
    icon: "mdi:thermometer"
    calibration:
      b_constant: 3350
      reference_resistance: 10kOhm
      reference_temperature: 298.15K
    on_value_range:
      - above: "80.0"
        then:
          - light.turn_off: lightid
  - platform: resistance
    id: temp_resistance_reading
    sensor: temp_analog_reading
    configuration: DOWNSTREAM
    resistor: 32kOhm
  - platform: adc
    id: temp_analog_reading
    pin: A0

status_led:
  pin: ${status_led_pin}

### Automation part

globals:
  - id: last_light_state
    type: bool
    restore_value: yes
    initial_value: "true"
  - id: light_is_available
    type: bool
    restore_value: yes
    initial_value: "false"
  - id: desired_state
    type: std::string
    initial_value: '"off"'

script:
  - id: online_toggle
    mode: queued
    then:
      - if:
          condition:
            binary_sensor.is_on: hass_light
          then:
            - homeassistant.service:
                service: ${hass_service}.turn_off
                data:
                  entity_id: ${light}
            - globals.set:
                id: desired_state
                value: '"off"'
          else:
            - homeassistant.service:
                service: ${hass_service}.turn_on
                data:
                  entity_id: ${light}
            - globals.set:
                id: desired_state
                value: '"on"'
      # Test if change actually went through
      - delay: 2s
      - if:
          condition:
            lambda: |-
              if (id(hass_light_state).state == id(desired_state)) {
                return false;
              } else {
                return true;
              }
          then:
            script.execute: offline_toggle

  - id: offline_toggle
    then:
      if:
        condition:
          light.is_on: lightid
        then:
          if:
            condition:
              lambda: |-
                if (id(last_light_state) == true) {
                  return true;
                }
                return false;
            then:
              # Last state was on, and relay is on
              # just turn relay off
              - light.turn_off:
                  id: lightid
              - globals.set:
                  id: last_light_state
                  value: "false"
            else:
              # Last state was off, and relay is on.
              # turn off and on again
              - light.turn_off:
                  id: lightid
              - delay: 1s
              - light.turn_on:
                  id: lightid
              - globals.set:
                  id: last_light_state
                  value: "true"
        else:
          # Relay was off, just turn the relay on again
          - light.turn_on:
              id: lightid
          - globals.set:
              id: last_light_state
              value: "true"

  # Toggle light
  - id: toggle_light
    then:
      if:
        condition:
          - lambda: |-
              ESP_LOGD("toggle_light", "light_is_available = %s", id(light_is_available) ? "true" : "false");
              return id(light_is_available) == true;
          - api.connected:
        then:
          script.execute: online_toggle
        else:
          script.execute: offline_toggle
